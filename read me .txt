/space-game

 ‚îÇ‚îÄ‚îÄ app.js
 ‚îÇ‚îÄ‚îÄ index.html
 ‚îÇ‚îÄ‚îÄ task.html
 ‚îÇ‚îÄ‚îÄ airdrop.html
 ‚îÇ‚îÄ‚îÄ games.html
 ‚îî‚îÄ‚îÄ /image
 ‚îÇ       ‚îÇ‚îÄ‚îÄ background.jpg
 ‚îÇ       ‚îÇ‚îÄ‚îÄ caracter.png
 ‚îÇ‚îÄ‚îÄ package.json
 ‚îÇ‚îÄ‚îÄ node_modules/
 ‚îî‚îÄ‚îÄ database.sql
 

index.html :
<!DOCTYPE html> 
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
  <title>Tap Game</title>
  <style>
    body {
      background-image: url("/background.jpg");
      background-size: cover;
      background-attachment: fixed;
      display: flex;
      flex-direction: column;
      align-items: center;
      height: 100vh;
      margin: 0;
      font-family: 'Poppins', sans-serif;
      color: white;
      text-align: center;
    }

    .navbar {
      width: 100%;
      background: rgba(0, 0, 0, 0.8);
      position: fixed;
      top: 0;
      left: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 10px 0;
      box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.5);
    }

    .marquee {
      width: 100%;
      overflow: hidden;
      white-space: nowrap;
      position: relative;
    }

    .moving-text {
      display: inline-block;
      animation: moveText 13s linear infinite alternate;
      font-size: 18px;
      font-weight: bold;
      color: yellow;
      cursor: pointer;
    }

    @keyframes moveText {
      0% { transform: translateX(100%); }
      100% { transform: translateX(-100%); }
    }

    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      flex-grow: 1;
      margin-top: 60px;
    }

    .info-box {
      background: rgba(0, 0, 0, 0.6);
      padding: 15px 25px;
      border-radius: 12px;
      box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);
      margin-bottom: 15px;
    }

    h1 {
      font-size: 24px;
      margin-bottom: 10px;
    }

    .stat-box {
      display: flex;
      justify-content: center;
      gap: 15px;
    }

    .stat {
      background: rgba(255, 255, 255, 0.2);
      padding: 10px 20px;
      border-radius: 8px;
      font-size: 18px;
      font-weight: bold;
      box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.4);
    }

    img {
      width: 150px;
      cursor: pointer;
      transition: transform 0.2s ease-in-out;
    }

    img:hover {
      transform: scale(1.1);
    }

    img:active {
      animation: tapEffect 0.2s ease-in-out;
    }

    @keyframes tapEffect {
      0% { transform: scale(1.1); }
      50% { transform: scale(0.9); }
      100% { transform: scale(1); }
    }

    #bottomNav {
      display: flex;
      justify-content: space-around;
      width: 100%;
      background: rgba(0, 0, 0, 0.7);
      position: fixed;
      bottom: 0;
      padding: 10px 0;
    }

    #bottomNav div {
      color: white;
      flex: 1;
      text-align: center;
      padding: 10px;
      font-size: 16px;
      cursor: pointer;
    }

    #airdrop {
      color: yellow;
      font-weight: bold;
    }

    .small-text {
      font-size: small;
    }
  </style>
</head>
<body>

  <div class="navbar">
    <div class="marquee">
      <span class="moving-text" onclick="window.location.href='/airdrop.html'">üéÅ Airdrop üéÅ</span>
    </div>
  </div>

  <div class="container">
    <div class="info-box">
      <h1 id="userName">Welcome, User!</h1>
      <div class="stat-box">
        <div class="stat">
          Clicks: <span id="counter">??</span>
          <div class="small-text">1000 ‚û° 1 Dream$</div>
        </div>
        <div class="stat">
          Dream$: <span id="dream">??</span>
          <div class="small-text">1000 = 1$</div>
        </div>
      </div>
    </div>
    <img src="/caracter.png" id="tapImage" alt="Tap to earn points">
  </div>

  <div id="bottomNav">
    <div onclick="window.location.href='/'">üè† Home</div>
    <div onclick="window.location.href='/task.html'">üìã Tasks</div>
    <div id="airdrop" onclick="window.location.href='/games.html'">üéÆ Game</div>
  </div>

  <script>
    let userIdentifier = localStorage.getItem('userIdentifier');
    let userName = localStorage.getItem('userName');

    if (!userIdentifier || !userName) {
      userIdentifier = 'user-' + Date.now();
      userName = prompt("Enter your name:") || "User";
      localStorage.setItem('userIdentifier', userIdentifier);
      localStorage.setItem('userName', userName);
    }

    document.getElementById('userName').textContent = `Welcome, ${userName}!`;

    function updateUI(counter, dream$) {
      document.getElementById('counter').textContent = counter;
      document.getElementById('dream').textContent = dream$;
    }

    document.getElementById('tapImage').addEventListener('click', function () {
      fetch('/increment', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userIdentifier, userName })
      })
      .then(response => response.json())
      .then(data => {
        updateUI(data.userCounter, data.dream$);
      })
      .catch(err => console.error('Error:', err));
    });

    fetch(`/getUserData?userIdentifier=${userIdentifier}`)
      .then(response => response.json())
      .then(data => {
        if (data.exists) {
          updateUI(data.userCounter, data.dream$);
        }
      })
      .catch(err => console.error('Error:', err));
  </script>
</body>
</html>

app.js :
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const app = express();
const port = 3000;

app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'image')));
app.use(express.json());

let users = {};

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/games.html', (req, res) => {
  res.sendFile(path.join(__dirname, 'games.html'));
});

app.get('/task.html', (req, res) => {
  res.sendFile(path.join(__dirname, 'task.html'));
});

app.post('/increment', (req, res) => {
  const { userIdentifier, userName } = req.body;

  if (users[userIdentifier]) {
    users[userIdentifier].counter++;
    users[userIdentifier].dream$ = Math.floor(users[userIdentifier].counter / 1000);
  } else {
    users[userIdentifier] = { counter: 1, tasksCompleted: 0, dream$: 0, name: userName };
  }

  res.json({ 
    userCounter: users[userIdentifier].counter, 
    dream$: users[userIdentifier].dream$, 
    userName: users[userIdentifier].name 
  });
});

app.post('/task-completed', (req, res) => {
  const { userIdentifier } = req.body;

  if (users[userIdentifier]) {
    users[userIdentifier].tasksCompleted++;
  } else {
    users[userIdentifier] = { counter: 0, tasksCompleted: 1, dream$: 0 };
  }

  res.json({
    tasksCompleted: users[userIdentifier].tasksCompleted,
    userName: users[userIdentifier].name
  });
});

app.post('/saveUserData', (req, res) => {
  const { userIdentifier, userName } = req.body;
  users[userIdentifier] = users[userIdentifier] || { counter: 0, tasksCompleted: 0, dream$: 0, name: userName };
  users[userIdentifier].name = userName;
  res.json({ success: true });
});

app.get('/getUserData', (req, res) => {
  const userIdentifier = req.query.userIdentifier;
  
  if (users[userIdentifier]) {
    res.json({ 
      exists: true, 
      userName: users[userIdentifier].name, 
      userCounter: users[userIdentifier].counter, 
      dream$: users[userIdentifier].dream$ // ‚úÖ ÿ•ÿ±ÿ≥ÿßŸÑ ŸÇŸäŸÖÿ© Dream$
    });
  } else {
    res.json({ exists: false });
  }
});

app.get('/database', (req, res) => {
  res.json({ users });
});

app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});


game.html :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
  <title>Airdrop</title>
  <style>
    body {
      background-image: url("/background.jpg");
      background-repeat: no-repeat;
      background-position: center;
      background-size: cover;
      background-attachment: fixed;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      font-family: 'Poppins', sans-serif;
      color: white;
      text-align: center;
    }

    .navbar {
      width: 100%;
      background: rgba(0, 0, 0, 0.8);
      position: fixed;
      top: 0;
      left: 0;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 10px 20px;
      box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.5);
    }

    .marquee {
      overflow: hidden;
      white-space: nowrap;
    }

    .moving-text {
      display: inline-block;
      white-space: nowrap;
      animation: moveText 13s linear infinite alternate;
      font-size: 18px;
      font-weight: bold;
      color: yellow;
    }

    @keyframes moveText {
      0% { transform: translateX(100%); }
      100% { transform: translateX(-100%); }
    }

    #dreamAmount {
      font-size: 18px;
      font-weight: bold;
      color: white;
    }

    .airdrop-container {
      background-color: rgba(0, 0, 0, 0.7);
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
    }

    .airdrop-option {
      padding: 15px;
      margin: 10px;
      border-radius: 5px;
      background-color: #007bff;
      color: white;
      cursor: pointer;
      font-size: 18px;
      transition: background-color 0.3s;
    }

    .airdrop-option:hover {
      background-color: #0056b3;
    }

    #bottomNav {
      display: flex;
      justify-content: space-around;
      width: 100%;
      background: rgba(0, 0, 0, 0.7);
      position: fixed;
      bottom: 0;
      left: 0;
      padding: 10px 0;
    }

    #bottomNav div {
      color: white;
      flex: 1;
      text-align: center;
      padding: 10px;
      font-size: 16px;
      cursor: pointer;
    }

    #airdrop {
      color: yellow;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <div class="navbar">
    <div id="dreamAmount">Dream$ = <span id="dreamBalance">??</span></div>
    <div class="marquee">
      <span class="moving-text" onclick="window.location.href='/airdrop.html'">üéÅ Airdrop üéÅ</span>
    </div>
  </div>

  <div class="airdrop-container">
    <h1>Select Dream$ Amount</h1>
    <div class="airdrop-option" onclick="joinAirdrop(1)">1 Dream$</div>
    <div class="airdrop-option" onclick="joinAirdrop(10)">10 Dream$</div>
    <div class="airdrop-option" onclick="joinAirdrop(100)">100 Dream$</div>
  </div>

  <div id="bottomNav">
    <div onclick="window.location.href='/'">üè† Home</div>
    <div onclick="window.location.href='/task.html'">üìã Tasks</div>
    <div id="airdrop" onclick="window.location.href='/games.html'">üéÆ Game</div>
  </div>

  <script>
    function updateDreamBalance() {
      const userIdentifier = localStorage.getItem("userIdentifier"); // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÖÿπÿ±ŸÅ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
      if (!userIdentifier) {
        document.getElementById('dreamBalance').textContent = "0";
        return;
      }
  
      fetch(`/getUserData?userIdentifier=${userIdentifier}`)
        .then(response => response.json())
        .then(data => {
          if (data.exists) {
            document.getElementById('dreamBalance').textContent = data.dream$;
          } else {
            document.getElementById('dreamBalance').textContent = "0";
          }
        })
        .catch(error => console.error('Error fetching user data:', error));
    }
  
    updateDreamBalance(); // ÿßÿ≥ÿ™ÿØÿπÿßÿ° ÿßŸÑÿØÿßŸÑÿ© ÿπŸÜÿØ ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿµŸÅÿ≠ÿ©
  </script>
  
</body>
</html>





const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const mongoose = require('mongoose');
const app = express();
const port = 3000;

// ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÄ MongoDB Atlas
const mongoURI = "mongodb+srv://john:john@john.gevwwjw.mongodb.net/telegramBot?retryWrites=true&w=majority&appName=john";
mongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log("‚úÖ Connected to MongoDB Atlas"))
  .catch(err => console.error("‚ùå MongoDB Connection Error:", err));

// ÿ™ÿπÿ±ŸäŸÅ Schema ŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸä ÿßŸÑŸÑÿπÿ®ÿ©
const userSchema = new mongoose.Schema({
  userIdentifier: { type: String, unique: true },
  name: String,
  counter: { type: Number, default: 0 },
  tasksCompleted: { type: Number, default: 0 },
  dream$: { type: Number, default: 0 },
  ipAddress: String // ‚úÖ ÿ•ÿ∂ÿßŸÅÿ© ÿ≠ŸÇŸÑ ÿ™ÿÆÿ≤ŸäŸÜ ÿπŸÜŸàÿßŸÜ IP
});


const User = mongoose.model("User", userSchema);

app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'image')));
app.use(express.json());

// ÿµŸÅÿ≠ÿßÿ™ ÿßŸÑŸÑÿπÿ®ÿ©
app.get('/', (req, res) => res.sendFile(path.join(__dirname, 'index.html')));
app.get('/games.html', (req, res) => res.sendFile(path.join(__dirname, 'games.html')));
app.get('/airdrop.html', (req, res) => res.sendFile(path.join(__dirname, 'airdrop.html')));
app.get('/task.html', (req, res) => res.sendFile(path.join(__dirname, 'task.html')));

// ÿ™ÿ≠ÿØŸäÿ´ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿπŸÜÿØ ÿßŸÑŸÜŸÇÿ± ÿπŸÑŸâ ÿßŸÑÿµŸàÿ±ÿ©
app.post('/increment', async (req, res) => {
  const { userIdentifier, userName } = req.body;
  let user = await User.findOne({ userIdentifier });
  
  if (user) {
    user.counter++;
    user.dream$ = Math.floor(user.counter / 1000);
  } else {
    user = new User({ userIdentifier, name: userName, counter: 1, dream$: 0 });
  }

  await user.save();
  res.json({ userCounter: user.counter, dream$: user.dream$, userName: user.name });
});


app.post('/saveUserData', async (req, res) => {
  const { userIdentifier, userName } = req.body;
  const userIp = req.ip; // ‚úÖ ÿßŸÑÿ™ŸÇÿßÿ∑ ÿπŸÜŸàÿßŸÜ IP

  let user = await User.findOne({ userIdentifier });

  if (user) {
    user.name = userName;
    user.ipAddress = userIp; // ‚úÖ ÿ™ÿ≠ÿØŸäÿ´ ÿπŸÜŸàÿßŸÜ IP
  } else {
    user = new User({ 
      userIdentifier, 
      name: userName, 
      counter: 0, 
      tasksCompleted: 0, 
      dream$: 0, 
      ipAddress: userIp // ‚úÖ ÿ™ÿÆÿ≤ŸäŸÜ IP ÿπŸÜÿØ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
    });
  }

  await user.save();

  res.json({ success: true });
});


app.get('/getUserData', async (req, res) => {
  const userIdentifier = req.query.userIdentifier;
  
  let user = await User.findOne({ userIdentifier });

  if (user) {
    res.json({
      exists: true,
      userName: user.name,
      userCounter: user.counter,
      dream$: user.dream$,
      ipAddress: user.ipAddress // ‚úÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿπŸÜŸàÿßŸÜ IP ŸÖÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
    });
  } else {
    res.json({ exists: false });
  }
});
app.get('/database', (req, res) => {
  res.json({ users });
});

// ÿ™ÿ≠ÿØŸäÿ´ ÿπÿØÿØ ÿßŸÑŸÖŸáÿßŸÖ ÿßŸÑŸÖŸÉÿ™ŸÖŸÑÿ©
app.post('/task-completed', async (req, res) => {
  const { userIdentifier } = req.body;
  let user = await User.findOne({ userIdentifier });

  if (user) {
    user.tasksCompleted++;
    await user.save();
    res.json({ tasksCompleted: user.tasksCompleted, userName: user.name });
  } else {
    res.json({ error: "User not found" });
  }
});

// ÿ¨ŸÑÿ® ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
app.get('/getUserData', async (req, res) => {
  const { userIdentifier } = req.query;
  let user = await User.findOne({ userIdentifier });

  if (user) {
    res.json({ exists: true, userName: user.name, userCounter: user.counter, dream$: user.dream$ });
  } else {
    res.json({ exists: false });
  }
});

// ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
